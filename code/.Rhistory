source('~/Documents/StockPrediction/code/stock_data_exploration.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)
library(readr)
library(ggplot2)
raw_data <- read_csv('../data/IBEX35.csv', col_names=TRUE)
tsprice <- xts(x=raw_data$Close, order.by = as.Date(raw_data$Date,"%m/%d/%y"), frequency = 255)
summary(tsprice)
plot(tsprice, type='l', main='Close price of stock', xlab='Date', ylab='Close Price')
gghistogram(tsprice, add.normal = TRUE, add.kde = TRUE, add.rug = TRUE)
stock_log_return = diff(log(tsprice), lag=1)
stock_log_return = stock_log_return[!is.na(stock_log_return)]
plot(stock_log_return, type='l', main='log returns')
print(adf.test(stock_log_return))
stock_lr_train = stock_log_return[index(stock_log_return)<as.Date("2015-01-01")]
stock_lr_test = stock_log_return[index(stock_log_return)>=as.Date("2015-01-01")]
opar <- par()
plot(stock_log_return, main='data split', type='l')
lines(stock_lr_train, col='red', type='l')
lines(stock_lr_test, col='blue', type='l')
par(opar)
gghistogram(stock_lr_train, add.normal = TRUE, add.kde = TRUE)
gghistogram(stock_lr_test, add.normal = TRUE, add.kde = TRUE)
par(mfrow=c(1,1))
acf.stock = acf(stock_lr_train, main='ACF Plot', lag.max = 100)
pacf.stock = pacf(stock_lr_train, main='PACF Plot', lag.max = 100)
print("Significant spikes in ACF:")
print(which(abs(acf.stock$acf)>0.05)-1)
print("Significant spikes in PACF:")
print(which(abs(pacf.stock$acf)>0.05))
# initializing an xts object for Actual log returns
actual_series = xts(0, as.Date("2015-1-1", "%Y-%m-%d"))
# initializing a dataframe for the forecasted return series
forecasted_series = data.frame(Forecasted=numeric())
start = nrow(stock_lr_train)
for (d in start:(nrow(stock_log_return)-1)){
stock_lr_train = stock_log_return[1:d,]
stock_lr_test = stock_log_return[(d+1):nrow(stock_log_return),]
# summary of ARIMA model using the determined (p,d,q) parameters
fit = arima(stock_lr_train, order=c(2,0,2), include.mean = FALSE)
# summary(fit)
# plot acf of the residuals
# acf(fit$residuals, main="Residuals plot")
# forecasting the log returns
arima.forecast = forecast.Arima(fit, h=1, level=99)
# summary(arima.forecast)
# plot the forecast
# par(mfrow=c(1,1))
# plot(arima.forecast, main="ARIMA Forecast")
# creating a series of forecasted returns for the forecasted period
forecasted_series = rbind(forecasted_series, arima.forecast$mean[1])
colnames(forecasted_series) = c("Forecasted")
# creating a series of actual returns for the forecasted period
actual_return = stock_log_return[(d+1),]
actual_series = c(actual_series, xts(actual_return))
rm(actual_return)
# print(tsprice[(d+1),])
# print(tsprice[(d+2),])
}
summary(fit)
summary(arima.forecast)
# adjust the length of the actual return series
actual_series = actual_series[-1]
# create a time sereis object of the forecasted sereis
forecasted_series = xts(forecasted_series, index(actual_series))
# create a plot of the two return series - actual vs forecasted
plot(actual_series, type='l', main='Actural Returns vs Forecasted Returns')
lines(forecasted_series, lwd=1.5, col='red')
legend('bottomright', c('Actual','Forecasted'), lty=c(1,1), lwd=c(1.5,1.5), col=c('black', 'red'))
# create a table for the accuracy of the forecast
comparison = merge(actual_series, forecasted_series)
comparison$Accuracy = sign(comparison$actual_series)==sign(comparison$Forecasted)
print(comparison)
# compute the accuracy percentage metric
Accuracy_percentage = sum(comparison$Accuracy==1)*100/length(comparison$Accuracy)
print('Accuracy')
print(Accuracy_percentage)
# compute rmse
residual_series <- actual_series - forecasted_series
rmse <- sqrt(sum(apply(residual_series, 1, function(x){x^2}))/nrow(residual_series))
print('RMSE')
print(rmse)
library(quantmod)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)
library(readr)
library(ggplot2)
raw_data <- read_csv('../data/IBEX35.csv', col_names=TRUE)
tsprice <- xts(x=raw_data$Price, order.by = as.Date(raw_data$Date,"%m/%d/%y"), frequency = 255)
summary(tsprice)
plot(tsprice, type='l', main='Price of stock', xlab='Date', ylab='Close Price')
plot(tsprice, type='l', main='Price of stock', xlab='Date', ylab='Price')
plot.ts(tsprice)
plot.ts(log(tsprice))
plot(decompose(tsprice))
hw_model <- HoltWinters(tsprice, beta=F, gamma = F)
hw_model$fitted
hw_model$SSE
acf(tsprice)
pacf(tsprice)
auto.arima(tsprice)
arima_model <- auto.arima(tsprice)
arima_model$fitted
arima_model
arima_model <- auto.arima(tsprice, ic='bic')
arima_model
tsprice_train <- tsprice[index(stock_log_return)<as.Date("2015-01-01")]
tsprice_test <- tsprice[index(stock_log_return)>=as.Date("2015-01-01")]
arima_model <- arima(tsprice_train, order=c(0,1,0))
test_pred <- forecast.Arima(arima_model, h=5)
size(tsprice_test)
shape(tsprice_test)
len(tsprice_test)
length(tsprice_test)
test_pred <- forecast.Arima(arima_model, h=length(tsprice_test))
plot.forecast(test_pred)
test_pred
test_pred$residuals
fit_model <- auto.arima(tsprice_train)
fit_model
fit_model$coef
fit_model$var.coef
fit_model$model
fit_model$fitted
fit_model$arma
fit_model
source('~/Documents/StockPrediction/code/stock_data_exploration.R', echo=TRUE)
fit_model
tsprice[:10]
dt <- as.Date("2015-01-01")
dt
dt + 1
class(tsprice)
source('~/Documents/StockPrediction/code/stock_data_exploration_IBEX35.R', echo=TRUE)
test_pred
test_pred[0]
test_pred$x
test_pred$series
test_pred$fitted
test_pred[511]
test_pred
type(test_pred)
class(test_pred)
test_pred$Forecast
test_pred[Forecast]
test_pred$mean
as.numeric(test_pred$mean)
test_val <- as.numeric(test_pred$mean)
test_val[0]
test_val[0,0]
test_val[1]
length(test_val)
adf.test(tsprice_train, alternative="stationary", k=0)
adf.test(tsprice_train, alternative="stationary", k=1)
decompose(tsprice_train)
source('~/Documents/StockPrediction/code/stock_data_exploration_IBEX35.R', echo=TRUE)
decompose(tsprice_train)
plot(tsprice, type='l', main='Price of stock', xlab='Date', ylab='Price')
decompose(tsprice)
acf(tsprice)
acf(diff(tsprice))
adf.test(diff(tsprice_train), alternative="stationary", k=1)
ts_diff <- diff(tsprice, lag=1)
is.na(ts_diff)
ndiffs(tsprice_train, alpha=0.5, test='adf')
auto.arima(tsprice_train)
arimaorder(auto.arima(tsprice))
order <- arimaorder(auto.arima(tsprice))
order
class(order)
order[0]
order[1]
vector([1,2,3])
vector(1,2,3,)
vector(1,2,3)
plot(test_pred)
plot(test_pred$mean)
plot(tsprice_test)
source('~/Documents/StockPrediction/code/stock_data_exploration_IBEX35.R', echo=TRUE)
tsprice_test.index
tsprice_test
index(tsprice_test)
test_dates <- index(tsprice_test)
class(test_dates)
length(test_dates)
class(tsprice_test)
tsprice_test - tsprice_test
test_pred = xts()
test_pred[as.Date("2015-1-1")] = 10
test_pred <- c(test_pred, xts(10, as.Date("2015-1-1")))
test_pred <- c(test_pred, xts(as.integer(10), as.Date("2015-1-1")))
test_pred <- c(test_pred, xts(as.integer(10), as.Date("2015-1-1")))
test_pred <- data.frame(c(index(tsprice_test), val(tsprice_test)))
test_pred <- data.frame(c(index(tsprice_test), coredata(tsprice_test)))
test_pred
test_pred <- data.frame(Date=index(tsprice_test), Price=coredata(tsprice_test))
test_pred
rownames(test_pred) <- test_pred$Date
test_pred
drop(test_pred$Date)
test_pred
test_pred <- test_pred[, "Price"]
test_pred
source('~/Documents/StockPrediction/code/stock_data_exploration_IBEX35.R', echo=TRUE)
test_pred
yy <- test_pred
yy
tyy <- xts(yy, order.by = test_dates)
tyy
sqrt(mean((tyy - tsprice_test)^2))
plot.forecast(test_pred)
plot(test_pred)
source('~/Documents/StockPrediction/code/stock_data_exploration_IBEX35.R', echo=TRUE)
plot.forecast(test_fc)
plot(test_fc)
plot(tsprice_test, col='red')
ts.plot(test_fc, tsprice_test, gpars=list(col=c('green', 'black')))
plot(test_fc, tsprice_test, gpars=list(col=c('green', 'black')))
plot(test_fc, col='black')
plot(tsprice_test, col='red')
plot(test_fc, col='black')
par(new=TRUE)
plot(tsprice_test, col='red')
plot(tsprice_test, col='black')
par(new=TRUE)
plot(test_fc, col='green')
source('~/Documents/StockPrediction/code/stock_data_exploration_IBEX35.R', echo=TRUE)
par(col='black')
plot(tsprice)
par(new=TRUE)
par(col='green')
plot(test_fc)
par(col='black')
plot(tsprice)
par(new=TRUE)
plot(test_fc)
ggplot(rbind(tsprice, test_fc), aes(colour=c('black', 'green')))
ggplot(rbind(tsprice, test_fc))
raw_data <- read_csv('../data/IBEX35.csv', col_names=TRUE)
tsprice <- xts(x=raw_data$Price, order.by = as.Date(raw_data$Date,"%m/%d/%y"), frequency = 5)
summary(tsprice)
plot(tsprice, type='l', main='Price of stock', xlab='Date', ylab='Price')
tsprice_train <- tsprice[index(tsprice)<as.Date("2015-01-01")]
par(col='black')
plot(tsprice_test)
par(new=TRUE)
par(col='green')
plot(test_fc)
par(col='green')
plot(test_fc)
par(new=TRUE)
par(col='black')
plot(tsprice_test)
title("Stock Price Forecasting")
par(col='green')
plot(test_fc, main="")
par(new=TRUE)
par(col='black')
plot(tsprice_test, xlab='Date', ylab='Price')
title("Stock Price Forecasting")
par(col='green')
plot(test_fc, main="")
par(new=TRUE)
par(col='black')
plot(tsprice_test, xlab='Date', ylab='Price', main="Stock Price Forecasting")
paste('hel', 'lo')
paste('hel', 'lo', sep='')
paste0('hel', 'lo')
print(test_rmse)
test_mad <- mean(abs(test_fc - tsprice_test))
print(paste("MAD:", test_mad))
test_mep <- mean(abs(test_fc - tsprice_test)/tsprice_test) # Mean Error Percentage
print(paste("MEP:", test_mep))
print(paste("MEP:", test_mep, '%'))
test_mep <- mean(abs(test_fc - tsprice_test)/tsprice_test*100) # Mean Error Percentage
print(paste("MEP:", test_mep, '%'))
fc <- c(tsprice_train, test_fc)
plot(fc)
par(col='green')
plot(c(tsprice_train, test_fc), main="")
par(new=TRUE)
par(col='black')
plot(tsprice, xlab='Date', ylab='Price', main=paste(data_name, "Stock Price Forecasting"))
data_name= 'IBEX35'
plot(tsprice, xlab='Date', ylab='Price', main=paste(data_name, "Stock Price Forecasting"))
par(col='green')
plot(c(tsprice_train, test_fc), main="")
par(new=TRUE)
par(col='black')
plot(tsprice, xlab='Date', ylab='Price', main=paste(data_name, "Stock Price Forecasting"))
source('~/Documents/StockPrediction/code/stock_data_exploration_NI225.R', echo=TRUE)
raw_data <- read_csv(paste0(data_dir, data_name, '.csv'), col_names=TRUE)
tsprice <- xts(x=raw_data$Price, order.by = as.Date(raw_data$Date,"%m/%d/%y"), frequency = 5)
raw_data <- read_csv(paste0(data_dir, data_name, '.csv'), col_names=TRUE)
tsprice <- xts(x=raw_data$Open, order.by = as.Date(raw_data$Date,"%m/%d/%y"), frequency = 5)
source('~/Documents/StockPrediction/code/stock_data_exploration_NI225.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_IBEX35.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_NI225.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_NI225.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_NI225.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_NI225.R', echo=TRUE)
auto.arima(tsprice_train)
source('~/Documents/StockPrediction/code/stock_data_exploration_DAX30.R', echo=TRUE)
warnings()
source('~/Documents/StockPrediction/code/stock_data_exploration_TAIEX.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_DAX30.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_DAX30.R', echo=TRUE)
source('~/Documents/StockPrediction/code/stock_data_exploration_DAX30.R', echo=TRUE)
test_fc_arima$mean
test_fc
c(test_fc, tsprice_test)
tx <- c(test_fc, tsprice_test)
View(tx)
View(tx)
as.numeric(test_fc)
as.numeric(tsprice_test)
ts_diff <- (test_fc - tsprice_test)
ts_diff
sqrt(mean(ts_diff^2))
max(tsprice)
install.packages('ctv')
library('ctv')
ctv
install.views("Finance")
install.packages('parallel')
install.packages("parallel")
library(parallel)
no_cores <- detectCores()
no_cores
clust <- makeCluster(no_cores)
clust
stopCluster(clust)
